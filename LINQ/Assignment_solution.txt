Name : Hasmukh Makvana
________________________________________________________________________________________________________________________________________________________________

Structures

1. Create a structure 
struct Books 
   private string title;
   private string author;
   private string subject;
   private int book_id;
Include 2 methods called GetValues() and ShowValues() to accept and display details.

create a Class called TestStructures that invokes the above methods of the structure to accept and display the details of the book

Solution:
----------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StructuresEg
{
    public struct Books
    {
        private string title;
        private string author;
        private string subject;
        private int book_id;

        public void GetValues()
        {
            Console.Write("Enter Book Title : ");
            title = Console.ReadLine();
            Console.Write("Enter Author name : ");
            author = Console.ReadLine();
            Console.Write("Enter Subject Name : ");
            subject = Console.ReadLine();
            Console.Write("Enter Book Id : ");
            book_id = int.Parse(Console.ReadLine());
        }
        public void ShowValues()
        {
            Console.WriteLine($"Book Title : {this.title}");
            Console.WriteLine($"Author Name : {this.author}");
            Console.WriteLine($"Subject Name : {this.subject}");
            Console.WriteLine($"Book Id : {this.book_id}");
        }
    }
    public class TestStructures
    {
        static void Main(string[] args)
        {
            Books b = new Books();
            b.GetValues();
            b.ShowValues();
            Console.ReadLine();
        }
    }
}

______________________________________________________________________________________________________________________________________________________________________

Collections

2. Create a Class called Products with Productid, Product Name, Price. Accept 10 Products, sort them based on the price, and display the sorted Products

solution:
----------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProductEg
{
    class Products
    {
        int Productid;
        string ProductName;
        int Price;
        static void Main(string[] args)
        { 
            List<Products> productsList = new List<Products>();
            Console.WriteLine("*** Enter 10 Products ***");
            for(int i = 1; i < 11; i++)
            {
                Console.WriteLine($"Enter {i} Product details");
                Console.Write($"Auto product id : {i} ");
                int id = i;
                Console.Write("Enter Product Name : ");
                string Name = Console.ReadLine();
                Console.Write("Enter Product Price : ");
                int price = int.Parse(Console.ReadLine());
                productsList.Add(new Products { Productid=id, ProductName=Name, Price=price });
                Console.WriteLine("--------------------------------------");
            }

            //sorted by ascending 
            Console.WriteLine("sorted by price(ascending)");
            var productdetails = productsList.OrderBy(s => s.Price);
            foreach(Products p in productdetails)
            {
                Console.WriteLine($"Product id: {p.Productid} | Product Name: {p.ProductName} | Product Price: {p.Price}");
            }
            Console.ReadLine();
        }
    }
}


________________________________________________________________________________________________________________________________________________________

3. Create a simple Stationery application to add items and display added items using Generic List collections

Solution:
------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StationeryEg
{
    class Stationery
    {
        int Itemid;
        string ItemName;
        int Price;
        List<Stationery> stationeries = new List<Stationery>();
        public void AddItem()
        {
            Console.Write("Enter Item Id : ");
            int id = int.Parse(Console.ReadLine());
            Console.Write("Enter Item Name : ");
            string iname = Console.ReadLine();
            Console.Write("Enter Price : ");
            int price = int.Parse(Console.ReadLine());
            stationeries.Add(new Stationery{ Itemid = id, ItemName = iname, Price = price });
        }
        public void DisplayItem()
        {
            Console.WriteLine("-------------------------------------------------------------------");
            foreach (Stationery s in stationeries) 
            {
                Console.WriteLine($"ID: {s.Itemid} | Item Name: {s.ItemName} | Price: {s.Price}");
            }       
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            int ch = 0;
            Stationery stationery = new Stationery();
            do
            {
                Console.WriteLine("----------------------------------");
                Console.WriteLine("1. Add Stationeries Item : ");
                Console.WriteLine("2. Show All Stationeries Item : ");
                Console.WriteLine("3. Exit : ");
                ch = int.Parse(Console.ReadLine());
                switch (ch)
                {
                    case 1:
                        stationery.AddItem();
                        break;
                    case 2:
                        stationery.DisplayItem();
                        break;
                    default:
                        break;
                }
            } while (ch < 3);
        }
    }
}

_________________________________________________________________________________________________________________________________________________________

LINQ  :

1. Create a console application and add class named Employee with following field.
Employee Class
EmployeeID (Integer)
FirstName (String)
LastName (String)
Title (String)
DOB (Date)
DOJ (Date)
City (String)

2. Create a Generic List Collection empList and populate it with the following records.

EmployeeID 	FirstName	   LastName 		Title 		DOB 			DOJ 			City
1001		     Malcolm  	     Daruwalla 	Manager 		16/11/1984 	8/6/2011 		Mumbai
1002 		Asdin	     Dhalla 		AsstManager 	20/08/1984 	7/7/2012 		Mumbai
1003 		Madhavi 	     Oza 		     Consultant 	14/11/1987 	12/4/2015 	Pune
1004 		Saba 		Shaikh		SE 			3/6/1990	 	2/2/2016	 	Pune
1005 		Nazia 		Shaikh 		SE 			8/3/1991 		2/2/2016	 	Mumbai
1006 		Amit 		Pathak 		Consultant 	7/11/1989 	8/8/2014 		Chennai
1007 		Vijay 		Natrajan	 	Consultant 	2/12/1989	 	1/6/2015 		Mumbai
1008 		Rahul 		Dubey 		Associate	 	11/11/1993 	6/11/2014	 	Chennai
1009 		Suresh 		Mistry		Associate 	12/8/1992 	3/12/2014 	Chennai
1010 		Sumit 		Shah 		Manager 		12/4/1991 	2/1/2016 		Pune

3. Now once the collection is created write down and execute the LINQ queries for collection 
as follows :

a. Display detail of all the employee
b. Display details of all the employee whose location is not Mumbai
c. Display details of all the employee whose title is AsstManager
d. Display details of all the employee whose Last Name start with S
e. Display a list of all the employee who have joined before 1/1/2015
f. Display a list of all the employee whose date of birth is after 1/1/1990
g. Display a list of all the employee whose designation is Consultant and Associate
h. Display total number of employees
i. Display total number of employees belonging to “Chennai”
j. Display highest employee id from the list
k. Display total number of employee who have joined after 1/1/2015
l. Display total number of employee whose designation is not “Associate”
m. Display total number of employee based on City
n. Display total number of employee based on city and title
o. Display total number of employee who is youngest in the list


Solution:
-------------

********** LINQ ALL Solution **********

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EmployeeEg
{
    class Employee
    {
        public int EmployeeID;
        public string FirstName;
        public string LastName;
        public string Title;
        public DateTime DOB;
        public DateTime DOJ;
        public string City;
    }
    class Program
    {
        static void Main(string[] args)
        {
            List<Employee> emplist = new List<Employee>
            { 
                new Employee{ EmployeeID = 1001, FirstName = "Malcolm", LastName = "Daruwalla", Title="Manager", DOB=DateTime.Parse("16/11/1984"), DOJ=DateTime.Parse("8/6/2011"), City="Mumbai"},
                new Employee{ EmployeeID = 1002, FirstName = "Asdin", LastName = "Dhalla", Title="AsstManager", DOB=DateTime.Parse("20/08/1984"), DOJ=DateTime.Parse("7/7/2012"), City="Mumbai"},
                new Employee{ EmployeeID = 1003, FirstName = "Madhavi", LastName = "Oza", Title="Consultant", DOB=DateTime.Parse("14/11/1987"), DOJ=DateTime.Parse("12/4/2015"), City="Pune"},
                new Employee{ EmployeeID = 1004, FirstName = "Saba", LastName = "Shaikh", Title="SE", DOB=DateTime.Parse("3/6/1990"), DOJ=DateTime.Parse("2/2/2016"), City="Pune"},
                new Employee{ EmployeeID = 1005, FirstName = "Nazia", LastName = "Shaikh", Title="SE", DOB=DateTime.Parse("8/3/1991"), DOJ=DateTime.Parse("2/2/2016"), City="Mumbai"},
                new Employee{ EmployeeID = 1006, FirstName = "Amit", LastName = "Pathak", Title="Consultant", DOB=DateTime.Parse("7/11/1989"), DOJ=DateTime.Parse("8/8/2014"), City="Chennai"},
                new Employee{ EmployeeID = 1007, FirstName = "Vijay", LastName = "Natrajan", Title="Consultant", DOB=DateTime.Parse("2/12/1989"), DOJ=DateTime.Parse("1/6/2015"), City="Mumbai"},
                new Employee{ EmployeeID = 1008, FirstName = "Rahul", LastName = "Dubey", Title="Associate", DOB=DateTime.Parse("11/11/1993"), DOJ=DateTime.Parse("6/11/2014"), City="Chennai"},
                new Employee{ EmployeeID = 1009, FirstName = "Suresh", LastName = "Mistry", Title="Associate", DOB=DateTime.Parse("12/8/1992"), DOJ=DateTime.Parse("3/12/2014"), City="Chennai"},
                new Employee{ EmployeeID = 1010, FirstName = "Sumit", LastName = "Shah", Title="Manager", DOB=DateTime.Parse("12/4/1991"), DOJ=DateTime.Parse("2/1/2016"), City="Pune"}
            };

            //a. Display detail of all the employee
            var mydata = from a in emplist
                         select a;
            foreach (Employee e in mydata)
            {
                Console.WriteLine($"Employee id: {e.EmployeeID} | FirstName: {e.FirstName} | LastName: {e.LastName} | Title: {e.Title} | DOB: {e.DOB.ToString("dd-MMM-yyyy")} | DOJ: {e.DOJ.ToString("dd-MMM-yyyy")} | City: {e.City}");
            }

            //b. Display details of all the employee whose location is not Mumbai
            Console.WriteLine(); 
            Console.WriteLine("***** b. Display details of all the employee whose location is not Mumbai *****");
            IEnumerable<Employee> linqoperation = from a in emplist
                                                  where a.City != "Mumbai"
                                                  select a;
            foreach (Employee e in linqoperation)
            {
                Console.WriteLine($"Employee id: {e.EmployeeID} | FirstName: {e.FirstName} | LastName: {e.LastName} | Title: {e.Title} | DOB: {e.DOB.ToString("dd-MMM-yyyy")} | DOJ: {e.DOJ.ToString("dd-MMM-yyyy")} | City: {e.City}");
            }

            //c. Display details of all the employee whose title is AsstManager
            Console.WriteLine();
            Console.WriteLine("***** c. Display details of all the employee whose title is AsstManager *****");
            linqoperation = from a in emplist
                            where a.Title == "AsstManager"
                            select a;
            foreach (Employee e in linqoperation)
            {
                Console.WriteLine($"Employee id: {e.EmployeeID} | FirstName: {e.FirstName} | LastName: {e.LastName} | Title: {e.Title} | DOB: {e.DOB.ToString("dd-MMM-yyyy")} | DOJ: {e.DOJ.ToString("dd-MMM-yyyy")} | City: {e.City}");
            }

            //d. Display details of all the employee whose Last Name start with S
            Console.WriteLine();
            Console.WriteLine("***** d. Display details of all the employee whose Last Name start with S *****");
            linqoperation = from a in emplist
                            where a.LastName.StartsWith("S")
                            select a;
            foreach (Employee e in linqoperation)
            {
                Console.WriteLine($"Employee id: {e.EmployeeID} | FirstName: {e.FirstName} | LastName: {e.LastName} | Title: {e.Title} | DOB: {e.DOB.ToString("dd-MMM-yyyy")} | DOJ: {e.DOJ.ToString("dd-MMM-yyyy")} | City: {e.City}");
            }

            //e. Display a list of all the employee who have joined before 1/1/2015
            Console.WriteLine();
            Console.WriteLine("***** e. Display a list of all the employee who have joined before 1/1/2015 *****");
            linqoperation = from a in emplist
                            where a.DOJ < DateTime.Parse("1/1/2015")
                            select a;
            foreach (Employee e in linqoperation)
            {
                Console.WriteLine($"Employee id: {e.EmployeeID} | FirstName: {e.FirstName} | LastName: {e.LastName} | Title: {e.Title} | DOB: {e.DOB.ToString("dd-MMM-yyyy")} | DOJ: {e.DOJ.ToString("dd-MMM-yyyy")} | City: {e.City}");
            }

            //f. Display a list of all the employee whose date of birth is after 1/1/1990
            Console.WriteLine();
            Console.WriteLine("***** f. Display a list of all the employee whose date of birth is after 1/1/1990 *****");
            linqoperation = from a in emplist
                            where a.DOB > DateTime.Parse("1/1/1990")
                            select a;
            foreach (Employee e in linqoperation)
            {
                Console.WriteLine($"Employee id: {e.EmployeeID} | FirstName: {e.FirstName} | LastName: {e.LastName} | Title: {e.Title} | DOB: {e.DOB.ToString("dd-MMM-yyyy")} | DOJ: {e.DOJ.ToString("dd-MMM-yyyy")} | City: {e.City}");
            }

            //g. Display a list of all the employee whose designation is Consultant and Associate
            Console.WriteLine();
            Console.WriteLine("***** g. Display a list of all the employee whose designation is Consultant and Associate *****");
            linqoperation = from a in emplist
                            where a.Title == "Consultant" || a.Title ==  "Associate"
                            select a;
            foreach (Employee e in linqoperation)
            {
                Console.WriteLine($"Employee id: {e.EmployeeID} | FirstName: {e.FirstName} | LastName: {e.LastName} | Title: {e.Title} | DOB: {e.DOB.ToString("dd-MMM-yyyy")} | DOJ: {e.DOJ.ToString("dd-MMM-yyyy")} | City: {e.City}");
            }

            //h. Display total number of employees
            Console.WriteLine();
            Console.WriteLine("***** h. Display total number of employees *****");
            var res = from a in emplist
                      select a;
            Console.WriteLine($"Total Employee : {res.Count()}");

            //i. Display total number of employees belonging to “Chennai”
            Console.WriteLine();
            Console.WriteLine("***** i. Display total number of employees belonging to “Chennai” *****");
            res = from a in emplist
                  where a.City == "Chennai"
                  select a;
            Console.WriteLine($"total : {res.Count()}");

            //j. Display highest employee id from the list
            Console.WriteLine();
            Console.WriteLine("***** j. Display highest employee id from the list *****");
            var highest = emplist.Max(e => e.EmployeeID);
            Console.WriteLine(highest);

            //k.Display total number of employee who have joined after 1/1/2015
            Console.WriteLine();
            Console.WriteLine("***** k.Display total number of employee who have joined after 1/1/2015 *****");
            res = from a in emplist
                  where a.DOJ > DateTime.Parse("1/1/2015")
                  select a;
            Console.WriteLine($"Total : {res.Count()}");

            //l.Display total number of employee whose designation is not “Associate”
            Console.WriteLine();
            Console.WriteLine("***** l.Display total number of employee whose designation is not “Associate” *****");
            res = from a in emplist
                  where a.Title != "Associate"
                  select a;
            Console.WriteLine($"Total : {res.Count()}");

            //m.Display total number of employee based on City
            Console.WriteLine();
            Console.WriteLine("***** m.Display total number of employee based on City *****");
            var groups = from a in emplist.GroupBy(a => a.City)
                         select new
                         {
                             Cityname = a.First().City,
                             citycount = a.Count()
                         };
            foreach(var e in groups)
            {
                Console.WriteLine($"city name : {e.Cityname} | total employee {e.citycount}");
            }

            //n.Display total number of employee based on city and title
            Console.WriteLine();
            Console.WriteLine("***** n.Display total number of employee based on city and title *****");
            var groupcity = from a in emplist.GroupBy(a => a.City)
                             select new
                             {
                                 Cityname = a.First().City,
                                 title = a.First().Title,
                                 count = a.Count()
                             };

            foreach (var e in groupcity)
            {
                Console.WriteLine($"cityname: {e.Cityname} | title: {e.title} | count: {e.count}");
            }

            //o.Display total number of employee who is youngest in the list
            Console.WriteLine();
            Console.WriteLine("***** o.Display total number of employee who is youngest in the list *****");
            res = from a in emplist
                  where a.DOB > DateTime.Parse("1/1/1992")
                  select a;
            Console.WriteLine($"total {res.Count()}");
            Console.Read();
        }
    }
}




